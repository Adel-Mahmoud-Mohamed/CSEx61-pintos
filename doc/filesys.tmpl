             +-------------------------+
             |         CS 140          |
             | PROJECT 4: FILE SYSTEMS |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mahmoud Attia <es-mahmoudattia2025@alexu.edu.eg>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

this web page: https://web.stanford.edu/class/cs140/projects/pintos/pintos_2.html

                Alarm 
             ============

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to timer.c:

    struct list sleepingList;   /*  list of sleeping threads. In this list we keep the sleeping threads 
                                    ordered ascendingly according to according to the threads wakeup ticks.
                                    threads wakeup_ticks is checked after each tick in the timer_interrupt 
                                    and if it was greater than the current ticks unblock this thread and 
                                    remove it for this list */
    
Added to struct thread:
	int64_t wakeup_ticks;       /* the tick we want the thread to wakeup on*/

Added to thread.h, thread.c:
	bool minWakeUpComparison(const struct list_elem *,const struct list_elem *, void *);
                    		 /* custom comparison for the list_insert_ordered function.pass 2 list_elem to 
                             it ang git their corresponding 2 threads and compare between their wakeup_ticks, 
                             returns T if the first has wakeup_ticks smaller than the second otherwise returns 
                             false. used in the list_insert_ordered tp insert the blocked thread in the sleepingList*/

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(ticks),
>> including the effects of the timer interrupt handler.

first thing we check that the interrupt is turned on (it must be) then if ticks to sleep where smaller than or
equal to 0 then return as there is no need to sleep. Then disable interrupts and store the current interrupt level 
in the old_level enum to protect the critcal section. Sets the curr_thread wakeup_ticks to curr timer ticks + 
the passed ticks to sleep to wakeup after this ticks from now. Then use the list_insert_ordered function to add 
the current thread to the sleeping_list(sorted by the minimum wakeup time). then block the curr thread and set the 
interrupt_level to its old value as we are out the critcal section now.

The timer interrupt handler check after each system tick the threads in the sleeping list to wakeup them if needed.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

use the list_insert_ordered so that threads in the sleepingList are sorted by the minimum wakeup time so when 
checking the wakeup time of each thread if we reach to a thread whose wakeup time is greater than the current 
system ticks we break without check the rest of threads as their wakeup time is greater or equal to this thread so 
minimize time inside the interrupt handler.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

before entering the critcal section where we modify the sleeping list, block the thread, and then schedule another 
thread we disable inturrupts so no other threads can enter this critcal section and section is considered as atomic 
operation.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

as we mentioned previously we disable interrupts before calling thread_block so the timer interrupt can't be serviced 
while we are inside the timer_sleep() critical section so race condition inside timer_interrupt (where we un_block 
threads and iterate sleepingList) is avoided.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

we know that the timer_interrupt function is called after each tick so the most important thing to consider is to 
minimize the amount of time spent on this function so we used ordered list to store the blocked threads so when 
checking them to wake_up we take the minimum possible time as illustrated in A3. When we think to implement using 
a non-ordered list we through that this way want enable us to minimize time inside timer_interrupt as we would have
to check all elements in the list which will decrease the system speed.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
